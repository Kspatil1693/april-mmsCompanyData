/********************[A] Flow Chart of web3.0******************/
Firstly ----create react application
npx create-react-app application_name

Secondly ---add dependencies truffle of web3.0
npm install -g truffle

Third-----add ganache framework 
npm install ganache --global

Fourth----install ipfs
npm install -g ipfs

Fifth----install solidity
npm install -g solc

Sixth---install web3 javascript
npm install web3
/*************************[B]**********************/
1] gitclone https://github.com/dappuniversity/dappazon -b starter_code
2]git branch
3]git remote -v
4]git remote remove origin
5]  clear
6]node -v
7]npm install
8] open it in vs code and check package.json file
9]hardhat.org check on google
10]check in vs code
smart contract include----contracts,test,scripts,hardhat.config.js folders
and its files.
11]npx hardhat test
12]flowchart of exact smart contract and frontend
13]

PS D:\Users\MMS Technologiescompany pvt.ltd\PracticeProject\dappazon> npx hardhat node
Started HTTP and WebSocket JSON-RPC server at http://127.0.0.1:8545/

Accounts
========

WARNING: These accounts, and their private keys, are publicly known.     
Any funds sent to them on Mainnet or any other live network WILL BE LOST.

Account #0: 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 (10000 ETH)
Private Key: 0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80

Account #1: 0x70997970C51812dc3A010C7d01b50e0d17dc79C8 (10000 ETH)
Private Key: 0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d

Account #2: 0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC (10000 ETH)
Private Key: 0x5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a

Account #3: 0x90F79bf6EB2c4f870365E785982E1f101E93b906 (10000 ETH)
Private Key: 0x7c852118294e51e653712a81e05800f419141751be58f605c371e15141b007a6

Account #4: 0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65 (10000 ETH)
Private Key: 0x47e179ec197488593b187f80a00eb0da91f1b9d0b13f8733639f19c30a34926a

Account #5: 0x9965507D1a55bcC2695C58ba16FB37d819B0A4dc (10000 ETH)
Private Key: 0x8b3a350cf5c34c9194ca85829a2df0ec3153be0318b5e2d3348e872092edffba

Account #6: 0x976EA74026E726554dB657fA54763abd0C3a0aa9 (10000 ETH)
Private Key: 0x92db14e403b83dfe3df233f83dfa3a0d7096f21ca9b0d6d6b8d88b2b4ec1564e

Account #7: 0x14dC79964da2C08b23698B3D3cc7Ca32193d9955 (10000 ETH)
Private Key: 0x4bbbf85ce3377467afe5d46f804f221813b2bb87f24d81f60f1fcdbf7cbf4356

Account #8: 0x23618e81E3f5cdF7f54C3d65f7FBc0aBf5B21E8f (10000 ETH)
Private Key: 0xdbda1821b80551c9d65939329250298aa3472ba22feea921c0cf5d620ea67b97

Account #9: 0xa0Ee7A142d267C1f36714E4a8F75612F20a79720 (10000 ETH)
Private Key: 0x2a871d0798f97d79848a013d4936a73bf4cc922c825d33c1cf7073dff6d409c6

Account #10: 0xBcd4042DE499D14e55001CcbB24a551F3b954096 (10000 ETH)
Private Key: 0xf214f2b2cd398c806f84e317254e0f0b801d0643303237d97a22a48e01628897

Account #11: 0x71bE63f3384f5fb98995898A86B02Fb2426c5788 (10000 ETH)
Private Key: 0x701b615bbdfb9de65240bc28bd21bbc0d996645a3dd57e7b12bc2bdf6f192c82

Account #12: 0xFABB0ac9d68B0B445fB7357272Ff202C5651694a (10000 ETH)
Private Key: 0xa267530f49f8280200edf313ee7af6b827f2a8bce2897751d06a843f644967b1

Account #13: 0x1CBd3b2770909D4e10f157cABC84C7264073C9Ec (10000 ETH)
Private Key: 0x47c99abed3324a2707c28affff1267e45918ec8c3f20b8aa892e8b065d2942dd

Account #14: 0xdF3e18d64BC6A983f673Ab319CCaE4f1a57C7097 (10000 ETH)
Private Key: 0xc526ee95bf44d8fc405a158bb884d9d1238d99f0612e9f33d006bb0789009aaa

Account #15: 0xcd3B766CCDd6AE721141F452C550Ca635964ce71 (10000 ETH)
Private Key: 0x8166f546bab6da521a8369cab06c5d2b9e46670292d85c875ee9ec20e84ffb61

Account #16: 0x2546BcD3c84621e976D8185a91A922aE77ECEc30 (10000 ETH)
Private Key: 0xea6c44ac03bff858b476bba40716402b03e41b8e97e276d1baec7c37d42484a0

Account #17: 0xbDA5747bFD65F08deb54cb465eB87D40e51B197E (10000 ETH)
Private Key: 0x689af8efa8c651a91ad287602527f3af2fe9f6501a7ac4b061667b5a93e037fd

Account #18: 0xdD2FD4581271e230360230F9337D5c0430Bf44C0 (10000 ETH)
Private Key: 0xde9be858da4a475276426320d5e9262ecfc3ba460bfac56360bfa6c4c28b4ee0

Account #19: 0x8626f6940E2eb28930eFb4CeF49B2d1F2C9C1199 (10000 ETH)
Private Key: 0xdf57089febbacf7ba0bc227dafbffa9fc08a93fdc68e1e42411a14efcf23656e

WARNING: These accounts, and their private keys, are publicly known.
Any funds sent to them on Mainnet or any other live network WILL BE LOST.

14]
add code step by step in 
contract folder---Dappazon.sol

contract Dappazon {
    //Code goes here...
    string public name = "Dappazon";
}
---->next add
test folder----Dappazon.js
const { expect } = require("chai")
const { ethers } =require('ethers')

const tokens = (n) => {
  return ethers.utils.parseUnits(n.toString(), 'ether')
}

describe("Dappazon", () => {
  it('has a name ', async () => { 
    const Dappazon = await ethers.getContractFactory("Dappazon")
     const dappazon = await Dappazon.deploy()
    expect(await dappazon.name()).to.equal("Dappazon")
  })
})
----and check
npx hardhat test on git bash

15] const { ethers } = require("hardhat"); it add in the folder test and it solve problem 
of ethers are not defined error of code
---after that check on terminal ---npx hardhat test
answer is show in below---

"
PS D:\Users\MMS Technologiescompany pvt.ltd\PracticeProject\dappazon> npx hardhat test
Compiled 1 Solidity file successfully


  Dappazon
    ✔ has a name  (2197ms)


  1 passing (2s)"
16]for test folder of file dappazon.js
--->we use second type of testing is

const name = await dappazon.name()
   expect(name).to.equal("Dappazon")
17]contract folder--->second way of writing declaration of name
 string public name;
   constructor(){
    name= "Dappazon";
   }
   --->after that check ----npx hardhat test
18]deploy contract ---second way
 let dappazon;
  beforeEach(async () => { 
    //Deploy contract
     const Dappazon = await ethers.getContractFactory("Dappazon")
     dappazon=await Dappazon.deploy()

  })
19]add second describe function with deployment in below

  describe("Deployment", () => { 
    it('has a name ', async () => { 
       //expect(await dappazon.name()).to.equal("Dappazon")
   const name = await dappazon.name()
   expect(name).to.equal("Dappazon")
  })
  })
  --->and check the ---npx hardhat test and output show in below
  -----PS D:\Users\MMS Technologiescompany pvt.ltd\PracticeProject\dappazon>
                                                                      npx hardhat test


  Dappazon
    Deployment
      ✔ has a name  (53ms)


  1 passing (3s)
20]address add in the contract folder dappazon.sol
 
 address public owner;
 constructor(){
  name="Dappazon";
  owner=msg.sender;
 }
 21]In dappazon.js folder add setUp of accounts
 beforeEach(async ()=>{
  //Setup Accounts
  console.log(await ethers.getSigners())
 })
 --->check the on terminal ---npx hardhat test
 ---->and secondly check the ---npx hardhat node
 22]add in test folder ---dappazon.js file
 --->add deployer and buyer with getSigners() functions
 describe("Dappazon",()=>{
  let deployer,buyer
  beforeEach(async ( )=>{
    [deployer,buyer]=await ethers.getSigners()
    //console.log(deployer,buyer);
    console.log(deployer.address,buyer.address);
  })
 })
 ---->check the ----npx hardhat test
23]dappazon.js----set owner with deployer
 
  describe("Deployment", () => { 
    it("Sets the owner", async () => { 
      expect(await dappazon.owner()).to.equal(deployer.address)
    })})

24]add list of products in dappazon.sol contracts in below

   //List products
   function list(
    uint256 _id,
    string memory _name,
    string memory _category,
    string memory _image,
    uint256 _cost,
    uint256 _rating,
    uint256 _stock
   )public {
    //Code goes here...
    
  
    
   }
  25]define Item of list in contract dappazon.sol
  struct Item{
    uint256 id;
    string name;
    string category;
    string image;
    unit256 cost;
    unit256 rating;
    unit256 stock;
  } 
26]In function list  add in public block
{
  //Code goes here....

  //Create Item struct
  Item memory item=Item(_id,_name,_category,_image,_cost,_rating,_stock);
}
27] add mapping in the dappazon.sol contract
write above constructor----mapping(uint256 => Item)public item;
28]Save Item Struct to blockchain
 items[_id]=item;

29]dappazon.js----add one describe listing of dappazon
   
    describe("Listing", () => { 
      let transaction
      beforeEach(async () => { 
        transaction =await dappazon.connect(deployer).list(
          1,
          "Shoes",
          "Clothing",
          "Image",
          1,
          4,
          5
        )
        await transaction.wait()
      })
      it("Return item attribute", async () => { 
         const item=await dappazon.items(1)
         expect(item.id).to.equal(1)
      }) 
    })
  })  
  ---->check and test file---npx hardhat test and output also show in below
    PS D:\Users\MMS Technologiescompany pvt.ltd\PracticeProject\dappazon> npx hardhat test
Compiled 1 Solidity file successfully


  Dappazon    
    Deployment
      ✔ Sets the owner
      Listing
        ✔ Return item attribute


  2 passing (2s)
    
   30]dappazon.js---->add some extra content code in listing
   describe("Listing", () => { 
      let transaction
            
      beforeEach(async () => { 
        transaction =await dappazon.connect(deployer).list(
          ID,
          NAME,
          CATEGORY,
          IMAGE,
          COST,
          RATING,
          STOCK
        )
        await transaction.wait()
      })
      it("Return item attribute", async () => { 
        const item = await dappazon.items(ID)
        expect(item.id).to.equal(ID)
      }) 
    })
  31]  //Global constants for listing an item....
      const ID = 1
      const NAME = "Shoes"
      const CATEGORY = "Clothing"
      const IMAGE = "https://ipfs.io/ipfs/QmQqzMTavQgT4f4T5v6PWBp7XNKtoPmC9jvn12WPT3gkSE/shoes.jpg"
      const COST = tokens(1)
      const RATING = 4
      const STOCK=5
   ----->check code----npx hardhat test
   ---->no change in the list output show as it is.
   32]add some expect content code---- dappazon.js

   it("Return item attribute", async () => { 
        const item = await dappazon.items(ID)

        expect(item.id).to.equal(ID)
        expect(item.name).to.equal(NAME)
        expect(item.category).to.equal(CATEGORY)
        expect(item.image).to.equal(IMAGE)
        expect(item.cost).to.equal(COST)
        expect(item.rating).to.equal(RATING)
        expect(item.stock).to.equal(STOCK)
   })
   ---->check code---npx hardhat test
   ----> in output no changes here
   33]Add event and emit code---this code write below mapping code in dappazon.sol

    event List(string name, uint256 cost, uint256 quantity);

    //Emit an event code---
    emit List(_name,_cost,_stock);

   34]Emits list event function create in the dappazon.js
   
      it("Emits List event", () => { 
        expect(transaction).to.emit(dappazon,"List")
      })
   ---->show output in below
   
PS D:\Users\MMS Technologiescompany pvt.ltd\PracticeProject\dappazon> npx hardhat test
Compiled 1 Solidity file successfully


  Dappazon
    Deployment
      ✔ Sets the owner
      Listing
        ✔ Return item attribute
        ✔ Emits List event


  3 passing (710ms)
  
  35]addin dappazon.sol of public block
  require(msg.sender == owner);//only true value then it work successfully here
  
  36]add some content in dappazon.sol
    
    modifier onlyOwner(){
       require(msg.sender == owner);//only true value then it work successfully here 
    }
    --->check code test---npx hardhat test
    --->PS D:\Users\MMS Technologiescompany pvt.ltd\PracticeProject\dappazon> npx hardhat test
Compiled 1 Solidity file successfully


  Dappazon
    Deployment
      ✔ Sets the owner (38ms)
      Listing
        ✔ Return item attribute (46ms)
        ✔ Emits List event


  3 passing (986ms)
  37]add buy products function in the dappazon.sol
  //Buy products
  function buy(uint256 _id) public {
    //Receive Crypto

    //Create an order

    //Substrack stock

    //Emit event
  }
38] changes in Dappazon.js----all code data....

describe("Listing",()=>{
  let transaction
   beforeEach(async ()=>{
    //List an item
    transaction = await dappazon.connect(deployer).list(
   ID, NAME,CATEGORY, IMAGE, COST, RATING, STOCK
    )
    await transaction.wait()
  //Buy an item
  transaction = await dappazon.connect(buyer).buy(ID, { value:COST})
   })
   it("Updates the contract balance",async ()=>{
    const result=awaitethers.provider.getBalance(dappazon.address)
    expect(result).to.equal(COST)
   })
})
---->after that check hardhat test and output show in below like this

PS D:\Users\MMS Technologiescompany pvt.ltd\PracticeProject\dappazon> npx hardhat test


  Dappazon
    Deployment
      ✔ Sets the owner
    Listing
      ✔ Updates the contract balance


  2 passing (842ms)
  
  39]add struct order in the Dappazon.sol ----contract folder
  --->write code above mapping
  struct Order{
        uint256 time;
        Item item;
    }
   40]dappazon.sol---add new code
    //Buy products
    function buy(uint256 _id) public payable {
     //Fetch item
     Item memory item = items[_id];   
    //Create an order
     Order memory order = Order(block.timestamp,item);
     //Add order for user
     orderCount[msg.sender]++; //---Order ID

    //Substrack stock
      items[_id].stock = item.stock - 1; 
    //Emit event
  }
  ---->Also add mapping of orderCount and  address
  mapping(address => uint256) public orderCount;
  mapping(address => mapping(uint256 =>Order)) public orders; 
 
41]dappazon.js----add updates buyers order count
 it("Updates buyer's order count", async () => { 
        const result = await dappazon.orderCount(buyer.address)
        expect(result).to.equal(1)
      })
  ---->check test----npx hardhat test
  ---->output show in below
  
PS D:\Users\MMS Technologiescompany pvt.ltd\PracticeProject\dappazon> npx hardhat test
Compiled 1 Solidity file successfully


  Dappazon
    Deployment
      ✔ Sets the owner (74ms)
    Listing
      ✔ Updates the contract balance
      ✔ Updates buyer's order count


  3 passing (1s)
  
  42]dappazon.js----add the order
   it("Adds the order", async () => { 
        const order = await dappazon.orders(buyer.address, 1)
        
        expect(order.time).to.be.greaterThan(0)
        expect(order.item.name).to.equal(NAME)
      })
----->check and test code----npx hardhat test
---->output show in below
 D:\Users\MMS Technologiescompany pvt.ltd\PracticeProject\dappazon> npx hardhat test


    Deployment
      ✔ Sets the owner (41ms)
    Listing
      ✔ Updates the contract balance
      ✔ Updates buyer's order count
      ✔ Adds the order


  4 passing (1s)

  ---->add in code this one
  it("Emits Buy event", () => { 
        expect(transaction).to.emit(dappazon,"Buy")
      })

  /****************stop on 1.19 to 1.42********************/
      












































